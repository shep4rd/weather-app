{"version":3,"sources":["features/weatherNow/weatherNowSlice.js","features/weatherLong/weatherLongSlice.js","features/menu/menuSlice.js","features/menu/Menu.js","features/header/Header.js","features/weatherNow/WeatherNow.js","features/weatherLong/weatherCard/WeatherCard.js","features/weatherLong/WeatherLong.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["API_ID","process","UNITS","weatherNowSlice","createSlice","name","initialState","data","status","error","reducers","idle","state","loading","succeeded","action","payload","failed","actions","selectWeatherNow","weatherNow","selectWeatherNowDate","dt","selectWeatherNowStatus","weatherLongSlice","selectWeatherLong","weatherLong","selectWeatherLongStatus","menuSlice","citySearchPhrase","cityName","coord","lon","lat","search","getCityCords","dispatch","axios","get","then","res","current","err","message","console","log","getWeatherLongForCity","selectCitySearchPhrase","menu","selectCityName","selectCoord","Menu","useDispatch","useSelector","useState","open","setOpen","handleDrawerClose","Paper","component","className","IconButton","aria-label","onClick","InputBase","placeholder","inputProps","onChange","event","target","value","Drawer","anchor","onEscapeKeyDown","onBackdropClick","classes","paper","Divider","List","ListItem","button","ListItemText","inset","to","Header","weatherDate","Grid","item","xs","Typography","align","variant","undefined","Date","toString","slice","WeatherNow","weatherData","useEffect","getWeatherNowOnLoad","container","gutterBottom","weather","description","temp","toFixed","light","grid","pressure","humidity","wind_speed","clouds","Card","styled","WeatherCard","props","date","WeatherLong","getWeatherLongOnLoad","daily","map","day","App","elevation","exact","path","configureStore","reducer","menuReducer","weatherLongReducer","weatherNowReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.912b8a5f.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\n\r\nconst API_ID = process.env.REACT_APP_OPENWEATHERMAP_API_KEY;\r\nconst UNITS = process.env.REACT_APP_OPENWEATHERMAP_UNITS;\r\n\r\nexport const weatherNowSlice = createSlice({\r\n  name: \"[WEATHER NOW]\",\r\n\r\n  initialState: {\r\n    data: {},\r\n    status: \"idle\",\r\n    error: null,\r\n  },\r\n\r\n  reducers: {\r\n    idle: (state) => {\r\n      state.status = \"idle\";\r\n    },\r\n    loading: (state) => {\r\n      state.status = \"loading\";\r\n    },\r\n    succeeded: (state, action) => {\r\n      state.status = \"succeeded\";\r\n      state.data = action.payload;\r\n    },\r\n    failed: (state, action) => {\r\n      state.status = \"failed\";\r\n      state.error = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  idle,\r\n  loading,\r\n  succeeded,\r\n  failed,\r\n} = weatherNowSlice.actions;\r\n\r\nexport const getWeatherNowForCity = (coord) => (dispatch) => {\r\n  dispatch(loading());\r\n  axios\r\n    .get(\r\n      `https://api.openweathermap.org/data/2.5/onecall?lat=${coord.lat}&lon=${coord.lon}&exclude=minutely,hourly,daily&units=${UNITS}&appid=${API_ID}`\r\n    )\r\n    .then(\r\n      (res) => {\r\n        dispatch(succeeded(res.data.current));\r\n      },\r\n      (err) => {\r\n        dispatch(failed(err.message));\r\n      }\r\n    );\r\n};\r\n\r\nexport const getWeatherNowOnLoad = (coord) => (dispatch) => {\r\n  dispatch(loading());\r\n  axios\r\n    .get(\r\n      `https://api.openweathermap.org/data/2.5/onecall?lat=${coord.lat}&lon=${coord.lon}&exclude=minutely,hourly,daily&units=${UNITS}&appid=${API_ID}`\r\n    )\r\n    .then(\r\n      (res) => {\r\n        dispatch(succeeded(res.data.current));\r\n      },\r\n      (err) => {\r\n        dispatch(failed(err.message));\r\n      }\r\n    );\r\n\r\n}\r\n\r\nexport const selectWeatherNow = (state) => state.weatherNow.data;\r\nexport const selectWeatherNowDate = (state) => state.weatherNow.data.dt;\r\nexport const selectWeatherNowStatus = (state) => state.weatherNow.status;\r\n\r\nexport default weatherNowSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\n\r\nconst API_ID = process.env.REACT_APP_OPENWEATHERMAP_API_KEY;\r\nconst UNITS = process.env.REACT_APP_OPENWEATHERMAP_UNITS;\r\n\r\nexport const weatherLongSlice = createSlice({\r\n  name: \"[WEATHER LONG]\",\r\n\r\n  initialState: {\r\n    data: {},\r\n    status: \"idle\",\r\n    error: null,\r\n  },\r\n\r\n  reducers: {\r\n    idle: (state) => {\r\n      state.status = \"idle\";\r\n    },\r\n    loading: (state) => {\r\n      state.status = \"loading\";\r\n    },\r\n    succeeded: (state, action) => {\r\n      state.status = \"succeeded\";\r\n      state.data = action.payload;\r\n    },\r\n    failed: (state, action) => {\r\n      state.status = \"failed\";\r\n      state.error = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  idle,\r\n  loading,\r\n  succeeded,\r\n  failed,\r\n} = weatherLongSlice.actions;\r\n\r\nexport const getWeatherLongForCity = (coord) => (dispatch) => {\r\n  dispatch(loading());\r\n  console.log(`https://api.openweathermap.org/data/2.5/onecall?lat=${coord.lat}&lon=${coord.lon}&exclude=current,minutely,hourly&units=${UNITS}&appid=${API_ID}`)\r\n  axios\r\n    .get(\r\n      `https://api.openweathermap.org/data/2.5/onecall?lat=${coord.lat}&lon=${coord.lon}&exclude=current,minutely,hourly&units=${UNITS}&appid=${API_ID}`\r\n    )\r\n    .then(\r\n      (res) => {\r\n        dispatch(succeeded(res.data));\r\n      },\r\n      (err) => {\r\n        dispatch(failed(err.message));\r\n      }\r\n    );\r\n\r\n};\r\n\r\nexport const getWeatherLongOnLoad = (coord) => (dispatch) => {\r\n  dispatch(loading());\r\n\r\n  axios\r\n    .get(\r\n      `https://api.openweathermap.org/data/2.5/onecall?lat=${coord.lat}&lon=${coord.lon}&exclude=current,minutely,hourly&units=${UNITS}&appid=${API_ID}`\r\n    )\r\n    .then(\r\n      (res) => {\r\n        dispatch(succeeded(res.data));\r\n      },\r\n      (err) => {\r\n        dispatch(failed(err.message));\r\n      }\r\n    );\r\n\r\n}\r\n\r\nexport const selectWeatherLong = (state) => state.weatherLong.data;\r\nexport const selectWeatherLongStatus = (state) => state.weatherLong.status;\r\n\r\nexport default weatherLongSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getWeatherNowForCity } from \"../weatherNow/weatherNowSlice\";\r\nimport { getWeatherLongForCity } from \"../weatherLong/weatherLongSlice\";\r\nimport axios from \"axios\";\r\n\r\nconst API_ID = process.env.REACT_APP_OPENWEATHERMAP_API_KEY;\r\n\r\nexport const menuSlice = createSlice({\r\n  name: \"[MENU]\",\r\n\r\n  initialState: {\r\n    citySearchPhrase: \"\",\r\n    cityName: \"Warsaw\",\r\n    coord: {\r\n      lon: \"21.01\",\r\n      lat: \"52.23\"\r\n    },\r\n    status: \"idle\",\r\n    error: null,\r\n  },\r\n\r\n  reducers: {\r\n    search: (state, action) => {\r\n      state.citySearchPhrase = action.payload;\r\n    },\r\n    idle: (state) => {\r\n      state.status = \"idle\";\r\n    },\r\n    loading: (state) => {\r\n      state.status = \"loading\";\r\n    },\r\n    succeeded: (state, action) => {\r\n      state.status = \"succeeded\";\r\n      state.cityName = action.payload.name;\r\n      state.coord.lon = action.payload.coord.lon;\r\n      state.coord.lat = action.payload.coord.lat;\r\n    },\r\n    failed: (state, action) => {\r\n      state.status = \"failed\";\r\n      state.error = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  search,\r\n  idle,\r\n  loading,\r\n  succeeded,\r\n  failed\r\n} = menuSlice.actions;\r\n\r\nexport const getCityCords = (cityName) => (dispatch) => {\r\n  dispatch(loading());\r\n  axios\r\n    .get(\r\n      `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${API_ID}`\r\n    )\r\n    .then(\r\n      (res) => {\r\n        dispatch(succeeded(res.data));\r\n        dispatch(getWeatherNowForCity(res.data.coord))\r\n        dispatch(getWeatherLongForCity(res.data.coord))\r\n      },\r\n      (err) => {\r\n        dispatch(failed(err.message));\r\n      }\r\n    );\r\n};\r\n\r\nexport const selectCitySearchPhrase = (state) => state.menu.citySearchPhrase;\r\nexport const selectCityName = (state) => state.menu.cityName;\r\nexport const selectCoord = (state) => state.menu.coord;;\r\n\r\nexport default menuSlice.reducer;\r\n","import React, { useState } from 'react';\r\nimport { IconButton, InputBase, Paper, Drawer, Divider, List, ListItem, ListItemText } from '@material-ui/core';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { Link } from 'react-router-dom';\r\nimport { search, selectCitySearchPhrase, getCityCords } from './menuSlice';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport './Menu.css';\r\n\r\nexport function Menu() {\r\n  const dispatch = useDispatch();\r\n  const citySearchPhrase = useSelector(selectCitySearchPhrase);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n\r\n  return (\r\n    <Paper component=\"form\" className=\"Root\">\r\n      <IconButton \r\n        className=\"MenuButton\" \r\n        aria-label=\"menu\"\r\n        onClick={() => handleDrawerOpen()}>\r\n        <MenuIcon />\r\n      </IconButton>\r\n      <InputBase\r\n        className=\"Input\"\r\n        placeholder=\"Search Weather Api\"\r\n        inputProps={{ 'aria-label': 'search weather api' }}\r\n        onChange={(event) => dispatch(search(event.target.value))}\r\n      />\r\n      <IconButton \r\n        className=\"SearchButton\" \r\n        aria-label=\"search\"\r\n        onClick={() => {\r\n          dispatch(getCityCords(citySearchPhrase))\r\n        }}\r\n      >\r\n        <SearchIcon />\r\n      </IconButton>\r\n        <Drawer\r\n          anchor=\"left\"\r\n          onEscapeKeyDown={handleDrawerClose}\r\n          onBackdropClick={handleDrawerClose}\r\n          open={open}\r\n          classes={{\r\n            paper: \"DrawerPaper\",\r\n          }}\r\n        >\r\n          <div>\r\n            <IconButton onClick={handleDrawerClose}>\r\n              x\r\n            </IconButton>\r\n          </div>\r\n          <Divider />\r\n          <List>\r\n            <ListItem button onClick={handleDrawerClose}>\r\n              <ListItemText inset>\r\n                <Link to={\"/\"}>Home</Link>\r\n              </ListItemText>\r\n            </ListItem>\r\n            <ListItem button onClick={handleDrawerClose}>\r\n              <ListItemText inset>\r\n                <Link to={\"/now\"}>Weather Now</Link>\r\n              </ListItemText>\r\n            </ListItem>\r\n            <ListItem button onClick={handleDrawerClose}>\r\n              <ListItemText inset>\r\n                <Link to={\"/long\"}>Weather Long</Link>\r\n              </ListItemText>\r\n            </ListItem>    \r\n          </List>\r\n        </Drawer> \r\n    </Paper>\r\n  );\r\n}","import React from 'react';\r\nimport { Grid, Typography } from '@material-ui/core';\r\nimport { selectWeatherNowDate } from '../weatherNow/weatherNowSlice';\r\nimport { selectCityName } from '../menu/menuSlice';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport function Header() {\r\n  const cityName = useSelector(selectCityName);\r\n  const weatherDate = useSelector(selectWeatherNowDate); \r\n\r\n  return (\r\n    <Grid item xs={12} className=\"Section\">\r\n      <Typography\r\n        align='center'\r\n        variant='h3'\r\n      >\r\n        {cityName}\r\n      </Typography>\r\n      <Typography\r\n        align='center'\r\n        variant='body1'\r\n      >\r\n        { weatherDate === undefined\r\n        ? Date().toString().slice(0,15)\r\n        : Date(weatherDate).toString().slice(0,15)\r\n        }\r\n      </Typography>\r\n    </Grid>\r\n  );\r\n}","import React, { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Grid, Typography, Divider } from '@material-ui/core';\r\nimport { \r\n  getWeatherNowOnLoad,\r\n  selectWeatherNow, \r\n  selectWeatherNowStatus \r\n} from './weatherNowSlice';\r\nimport { selectCoord } from '../menu/menuSlice';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport function WeatherNow() {\r\n  const dispatch = useDispatch();\r\n  const weatherData = useSelector(selectWeatherNow);\r\n  const status = useSelector(selectWeatherNowStatus);\r\n  const coord = useSelector(selectCoord);\r\n  \r\n  useEffect( () => {\r\n    if (status === 'idle') {\r\n      dispatch(getWeatherNowOnLoad(coord));\r\n    } \r\n  }, [status, coord, dispatch]);\r\n\r\n\r\n  return (\r\n    <>\r\n      { (status === 'succeeded') ?\r\n        <Grid container className=\"Section\">\r\n          <Grid item xs={12}>\r\n            <Typography align='center' variant='h4' gutterBottom>\r\n            {weatherData.weather[0].description} \r\n            </Typography> \r\n          </Grid>\r\n\r\n          <Grid item xs={8}>\r\n            <Typography\r\n              align='center'\r\n              variant='h2'\r\n              >\r\n              {weatherData.temp.toFixed(0)}&deg;C\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <Typography\r\n              variant='h6'\r\n              >\r\n              min {weatherData.temp.toFixed(0)}&deg;C\r\n            </Typography>\r\n            <Divider light></Divider>\r\n            <Typography\r\n              variant='h6'          \r\n              >\r\n              max {weatherData.temp.toFixed(0)}&deg;C\r\n            </Typography>\r\n          </Grid>\r\n        \r\n          <Grid item grid={12} >\r\n            <Typography>\r\n              Pressure: {weatherData.pressure} hPa\r\n            </Typography>\r\n            <Typography>\r\n              Humidity: {weatherData.humidity}%\r\n            </Typography>\r\n            <Typography>\r\n              Wind speed: {weatherData.wind_speed} m/s\r\n            </Typography>\r\n            <Typography>\r\n              Clouds: {weatherData.clouds}\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n      : <Typography>Loading...</Typography>\r\n      }\r\n    </>\r\n  );\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components'\r\nimport { Grid, Typography } from '@material-ui/core';\r\n\r\nconst Card = styled(Grid)`\r\n  padding: 5px 10px;\r\n  margin: 4px 2px;\r\n  border: 1px solid grey;\r\n  border-radius: 8px;\r\n  background-color: #ffffff33;\r\n  :hover {\r\n    opacity: 0.5;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport function WeatherCard(props) {\r\n  const date = new Date(props.date*1000)\r\n\r\n  return (\r\n    <Card container>\r\n      <Grid item xs={6}>\r\n        <Typography align='left' variant='h6'>\r\n          {date.toString().slice(0,10)}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <Typography align='right' variant='h6'>\r\n          {props.temp.toFixed(0)}&deg;C\r\n        </Typography>\r\n      </Grid>\r\n    </Card>\r\n  );\r\n}\r\n\r\nWeatherCard.propTypes = {\r\n  date: PropTypes.number.isRequired,\r\n  temp: PropTypes.number.isRequired\r\n}\r\n\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Grid, Typography } from \"@material-ui/core\";\r\nimport {\r\n  getWeatherLongOnLoad,\r\n  selectWeatherLong,\r\n  selectWeatherLongStatus,\r\n} from \"./weatherLongSlice\";\r\nimport { selectCoord } from \"../menu/menuSlice\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { WeatherCard } from \"./weatherCard/WeatherCard\";\r\n\r\nexport function WeatherLong() {\r\n  const dispatch = useDispatch();\r\n  const weatherData = useSelector(selectWeatherLong);\r\n  const status = useSelector(selectWeatherLongStatus);\r\n  const coord = useSelector(selectCoord);\r\n\r\n  useEffect(() => {\r\n    if (status === \"idle\") {\r\n      dispatch(getWeatherLongOnLoad(coord));\r\n    }\r\n  }, [status, coord, dispatch]);\r\n\r\n  return (\r\n    <>\r\n      {status === \"succeeded\" ? (\r\n        <Grid container className=\"Section\">\r\n          {weatherData.daily.map((day) => {\r\n            return (\r\n              <WeatherCard key={day.dt} date={day.dt} temp={day.temp.day} />\r\n            );\r\n          })}\r\n        </Grid>\r\n      ) : (\r\n        <Typography>Loading...</Typography>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport { Grid, Paper } from \"@material-ui/core\";\r\nimport { Menu } from './features/menu/Menu';\r\nimport { Header } from './features/header/Header';\r\nimport { WeatherNow } from './features/weatherNow/WeatherNow';\r\nimport { WeatherLong } from './features/weatherLong/WeatherLong';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <BrowserRouter>\r\n        <Menu />\r\n        <Paper elevation={3} className=\"Weather\">\r\n          <Grid container> \r\n            <Header />           \r\n            <Switch>\r\n              <Route exact path=\"/now\" component={WeatherNow} />\r\n              <Route exact path=\"/long\" component={WeatherLong} />\r\n              <Route path=\"/\">\r\n                Welcome in the weather App, open menu to see more options or search for weather.\r\n              </Route>\r\n            </Switch> \r\n          </Grid>\r\n        </Paper>\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport menuReducer from '../features/menu/menuSlice';\r\nimport weatherLongReducer from '../features/weatherLong/weatherLongSlice';\r\nimport weatherNowReducer from '../features/weatherNow/weatherNowSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    menu: menuReducer,\r\n    weatherLong: weatherLongReducer,\r\n    weatherNow: weatherNowReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}